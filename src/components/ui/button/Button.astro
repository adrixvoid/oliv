---
import type { HTMLAttributes } from "astro/types";
import { cva, type VariantProps } from "class-variance-authority";
import styles from "./Button.module.css";

export const buttonVariants = cva(styles.button, {
  variants: {
    variant: {
      default: styles.default,
      primary: styles.primary,
      ghost: styles.ghost,
    },
    size: {
      md: styles.medium,
      sm: styles.small,
      lg: styles.large,
      xl: styles.xlarge,
    },
    fullWidth: {
      true: styles["full-width"],
    },
    animated: {
      true: styles.animated
    }
  },
  defaultVariants: {
    variant: "default",
    size: "md",
  },
});

export type ButtonVariants = VariantProps<typeof buttonVariants>;

export type ButtonProps = (HTMLAttributes<"a"> | HTMLAttributes<"button">) &
  ButtonVariants & {
    asLink?: boolean;
    class?: string;
  };

const {
  asLink,
  variant,
  size,
  fullWidth,
  animated,
  class: className = "",
  ...props
} = Astro.props as ButtonProps;

const classNames = buttonVariants({ animated, variant, size, fullWidth, className });
---

{
  asLink ? (
    <a
      class={classNames}
      {...(props as HTMLAttributes<"a">)}
    >
      {
        animated ? (
          <span class={styles.text} aria-hidden="true">
          <slot />
        </span>
        <span class={styles.textGhost} aria-hidden="true">
          <slot />
        </span>
        ) : (
          <slot />
        )
      }
    </a>
  ) : (
    <button
      class={classNames}
      {...(props as HTMLAttributes<"button">)}
    >
      {
        animated ? (
          <span class={styles.text} aria-hidden="true">
          <slot />
        </span>
        <span class={styles.textGhost} aria-hidden="true">
          <slot />
        </span>
        ) : (
          <slot />
        )
      }
    </button>
  )
}
